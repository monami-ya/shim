/*
 * This software is released under the MIT License.
 * http://opensource.org/licenses/mit-license.php
 */
package org.multicore_association.shim.edit.gui.jface.preferences;

import org.eclipse.core.databinding.DataBindingContext;
import org.eclipse.core.databinding.UpdateValueStrategy;
import org.eclipse.core.databinding.beans.PojoProperties;
import org.eclipse.core.databinding.observable.value.IObservableValue;
import org.eclipse.jface.databinding.swt.WidgetProperties;
import org.eclipse.jface.preference.PreferencePage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.multicore_association.shim.api.Latency;
import org.multicore_association.shim.edit.gui.databinding.FloatToSmallNumberStringConverter;
import org.multicore_association.shim.edit.gui.databinding.StringToFloatConverter;
import org.multicore_association.shim.edit.gui.databinding.StringToFloatWapperConverter;
import org.multicore_association.shim.edit.gui.jface.ErrorMessagePool;
import org.multicore_association.shim.edit.gui.swt.TextRequiredModifier;
import org.multicore_association.shim.edit.gui.swt.UnsignedFloatModifier;
import org.multicore_association.shim.edit.model.preferences.PerformancePreferences;
import org.multicore_association.shim.edit.model.preferences.ShimPreferencesKey;
import org.multicore_association.shim.edit.model.preferences.ShimPreferencesStore;

/**
 * Preference page that allows configuration of the Latency.
 */
public class LatencyPreferencePage extends PreferencePage {
	private DataBindingContext m_bindingContext;

	private ShimPreferencesStore store;

	private PerformancePreferences parameter;
	private Text textBest;
	private Text textTypical;
	private Text textWorst;

	private ErrorMessagePool pool;

	/**
	 * Constructs a new instance of LatencyPreferencePage.
	 */
	public LatencyPreferencePage() {
		setTitle("Latency");

		store = ShimPreferencesStore.getInstance();
		parameter = new PerformancePreferences();
		parameter.setBest(store
				.getFloatWrapper(ShimPreferencesKey.P_LATENCY_BEST));
		parameter.setTypical(store
				.getFloat(ShimPreferencesKey.P_LATENCY_TYPICAL));
		parameter.setWorst(store
				.getFloatWrapper(ShimPreferencesKey.P_LATENCY_WORST));

		pool = new ErrorMessagePool(this);
	}

	/**
	 * Creates contents of this page.
	 * 
	 * @param parent
	 *            the parent composite
	 */
	@Override
	public Control createContents(Composite parent) {
		Composite container = new Composite(parent, SWT.NULL);
		container.setLayout(new GridLayout(2, false));

		Label lblBest = new Label(container, SWT.NONE);
		GridData gd_lblBest = new GridData(SWT.LEFT, SWT.CENTER, false, false,
				1, 1);
		gd_lblBest.widthHint = 60;
		lblBest.setLayoutData(gd_lblBest);
		lblBest.setText("Best");

		textBest = new Text(container, SWT.BORDER);
		GridData gd_textBest = new GridData(SWT.LEFT, SWT.CENTER, true, false,
				1, 1);
		gd_textBest.widthHint = 120;
		textBest.setLayoutData(gd_textBest);

		Label lblTypical = new Label(container, SWT.NONE);
		lblTypical.setText("Typical");

		textTypical = new Text(container, SWT.BORDER);
		GridData gd_textTypical = new GridData(SWT.LEFT, SWT.CENTER, true,
				false, 1, 1);
		gd_textTypical.widthHint = 120;
		textTypical.setLayoutData(gd_textTypical);

		Label lblWorst = new Label(container, SWT.NONE);
		lblWorst.setText("Worst");

		textWorst = new Text(container, SWT.BORDER);
		GridData gd_textWorst = new GridData(SWT.LEFT, SWT.CENTER, true, false,
				1, 1);
		gd_textWorst.widthHint = 120;
		textWorst.setLayoutData(gd_textWorst);
		m_bindingContext = initDataBindings();

		textBest.addModifyListener(new TextRequiredModifier(pool,
				Latency.class, "best"));
		textBest.addModifyListener(new UnsignedFloatModifier(pool, lblBest
				.getText(), true));
		textTypical.addModifyListener(new TextRequiredModifier(pool,
				Latency.class, "typical"));
		textTypical.addModifyListener(new UnsignedFloatModifier(pool, lblTypical
				.getText(), false));
		textWorst.addModifyListener(new TextRequiredModifier(pool,
				Latency.class, "worst"));
		textWorst.addModifyListener(new UnsignedFloatModifier(pool, lblWorst
				.getText(), true));

		return container;
	}

	/**
	 * Initializes the DataBindingContext.<br>
	 * This method is generated by WindowsBuilder.
	 * 
	 * @return the initialized DataBindingContext
	 */
	protected DataBindingContext initDataBindings() {
		DataBindingContext bindingContext = new DataBindingContext();
		//
		IObservableValue observeTextTextBestObserveWidget = WidgetProperties
				.text(SWT.Modify).observe(textBest);
		IObservableValue bestParameterObserveValue = PojoProperties.value(
				"best").observe(parameter);
		UpdateValueStrategy strategy = new UpdateValueStrategy();
		strategy.setConverter(new StringToFloatWapperConverter());
		UpdateValueStrategy strategy_1 = new UpdateValueStrategy();
		strategy_1.setConverter(new FloatToSmallNumberStringConverter());
		bindingContext.bindValue(observeTextTextBestObserveWidget,
				bestParameterObserveValue, strategy, strategy_1);
		//
		IObservableValue observeTextTextTypicalObserveWidget = WidgetProperties
				.text(SWT.Modify).observe(textTypical);
		IObservableValue typicalParameterObserveValue = PojoProperties.value(
				"typical").observe(parameter);
		UpdateValueStrategy strategy_2 = new UpdateValueStrategy();
		strategy_2.setConverter(new StringToFloatConverter());
		UpdateValueStrategy strategy_3 = new UpdateValueStrategy();
		strategy_3.setConverter(new FloatToSmallNumberStringConverter());
		bindingContext.bindValue(observeTextTextTypicalObserveWidget,
				typicalParameterObserveValue, strategy_2, strategy_3);
		//
		IObservableValue observeTextTextWorstObserveWidget = WidgetProperties
				.text(SWT.Modify).observe(textWorst);
		IObservableValue worstParameterObserveValue = PojoProperties.value(
				"worst").observe(parameter);
		UpdateValueStrategy strategy_4 = new UpdateValueStrategy();
		strategy_4.setConverter(new StringToFloatWapperConverter());
		UpdateValueStrategy strategy_5 = new UpdateValueStrategy();
		strategy_5.setConverter(new FloatToSmallNumberStringConverter());
		bindingContext.bindValue(observeTextTextWorstObserveWidget,
				worstParameterObserveValue, strategy_4, strategy_5);
		//
		return bindingContext;
	}

	/**
	 * @see org.eclipse.jface.preference.PreferencePage#performApply()
	 */
	@Override
	protected void performApply() {
		m_bindingContext.updateModels();

		store.setLatencyPreferences(parameter);
		store.save();

		super.performApply();
	}

	/**
	 * @see org.eclipse.jface.preference.PreferencePage#performDefaults()
	 */
	@Override
	protected void performDefaults() {
		parameter.setBest(store
				.getDefaultFloat(ShimPreferencesKey.P_LATENCY_BEST));
		parameter.setTypical(store
				.getDefaultFloat(ShimPreferencesKey.P_LATENCY_TYPICAL));
		parameter.setWorst(store
				.getDefaultFloat(ShimPreferencesKey.P_LATENCY_WORST));

		store.setToDefault(ShimPreferencesKey.P_LATENCY_BEST);
		store.setToDefault(ShimPreferencesKey.P_LATENCY_TYPICAL);
		store.setToDefault(ShimPreferencesKey.P_LATENCY_WORST);

		store.save();

		m_bindingContext.updateTargets();
		super.performDefaults();
	}
}
