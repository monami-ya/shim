/*
 * Copyright (c) 2014 eSOL Co.,Ltd. and Nagoya University
 *
 * This software is released under the MIT License.
 * http://opensource.org/licenses/mit-license.php
 */
package org.multicore_association.shim.edit.gui.jface.preferences;

import org.eclipse.core.databinding.DataBindingContext;
import org.eclipse.core.databinding.beans.PojoProperties;
import org.eclipse.core.databinding.observable.value.IObservableValue;
import org.eclipse.jface.databinding.swt.WidgetProperties;
import org.eclipse.jface.preference.PreferencePage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Group;
import org.multicore_association.shim.edit.model.ShimPreferences;
import org.multicore_association.shim.edit.model.preferences.SavePolicyPreferences;
import org.multicore_association.shim.edit.model.preferences.ShimPreferencesKey;
import org.multicore_association.shim.edit.model.preferences.ShimPreferencesStore;

/**
 * Preference page that allows configuration of saving preferences after Wizard.
 */
public class WizardInputPreferencePage extends PreferencePage {
	private DataBindingContext m_bindingContext;

	private ShimPreferencesStore store;

	private SavePolicyPreferences parameter;
	private Button btnAlways;
	private Button btnOnRequest;
	private Button btnNever;

	/**
	 * Constructs a new instance of WizardInputPreferencePage.
	 */
	public WizardInputPreferencePage() {
		setTitle("Others");

		store = ShimPreferencesStore.getInstance();

		parameter = new SavePolicyPreferences();
		parameter.setAlwaysSave(store
				.getBoolean(ShimPreferencesKey.WIZ_CHECK_ALWAYS));
		parameter.setSaveOnRequest(store
				.getBoolean(ShimPreferencesKey.WIZ_CHECK_ON_REQUEST));
		parameter.setNeverSave(store
				.getBoolean(ShimPreferencesKey.WIZ_CHECK_NEVER));
	}

	/**
	 * Creates contents of this page.
	 * 
	 * @param parent
	 *            the parent composite
	 */
	@Override
	public Control createContents(Composite parent) {
		Composite container = new Composite(parent, SWT.NULL);
		container.setLayout(new GridLayout(1, false));

		Group grpSavePreferencesYou = new Group(container, SWT.NONE);
		GridData gd_grpSavePreferencesYou = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_grpSavePreferencesYou.heightHint = 71;
		grpSavePreferencesYou.setLayoutData(gd_grpSavePreferencesYou);
		grpSavePreferencesYou
				.setText("Save preferences you input in the wizard");

		btnAlways = new Button(grpSavePreferencesYou, SWT.RADIO);
		btnAlways.setBounds(10, 21, 99, 18);
		btnAlways.setText("always");

		btnOnRequest = new Button(grpSavePreferencesYou, SWT.RADIO);
		btnOnRequest.setBounds(10, 45, 99, 18);
		btnOnRequest.setText("on request");

		btnNever = new Button(grpSavePreferencesYou, SWT.RADIO);
		btnNever.setBounds(10, 69, 99, 18);
		btnNever.setText("never");
		m_bindingContext = initDataBindings();

		return container;
	}

	/**
	 * Initializes the DataBindingContext.<br>
	 * This method is generated by WindowsBuilder.
	 * 
	 * @return the initialized DataBindingContext
	 */
	protected DataBindingContext initDataBindings() {
		DataBindingContext bindingContext = new DataBindingContext();
		//
		IObservableValue observeSelectionBtnAlwaysObserveWidget = WidgetProperties
				.selection().observe(btnAlways);
		IObservableValue alwaysSaveParameterObserveValue = PojoProperties
				.value("alwaysSave").observe(parameter);
		bindingContext.bindValue(observeSelectionBtnAlwaysObserveWidget,
				alwaysSaveParameterObserveValue, null, null);
		//
		IObservableValue observeSelectionBtnOnRequestObserveWidget = WidgetProperties
				.selection().observe(btnOnRequest);
		IObservableValue saveOnRequestParameterObserveValue = PojoProperties
				.value("saveOnRequest").observe(parameter);
		bindingContext.bindValue(observeSelectionBtnOnRequestObserveWidget,
				saveOnRequestParameterObserveValue, null, null);
		//
		IObservableValue observeSelectionBtnNeverObserveWidget = WidgetProperties
				.selection().observe(btnNever);
		IObservableValue neverSaveParameterObserveValue = PojoProperties.value(
				"neverSave").observe(parameter);
		bindingContext.bindValue(observeSelectionBtnNeverObserveWidget,
				neverSaveParameterObserveValue, null, null);
		//
		return bindingContext;
	}

	/**
	 * @see org.eclipse.jface.preference.PreferencePage#performApply()
	 */
	@Override
	protected void performApply() {
		m_bindingContext.updateModels();

		store.setSavePreferences(parameter);
		store.save();

		ShimPreferences.getCurrentInstance().loadSavePolicyPreferences();
		super.performApply();
	}

	/**
	 * @see org.eclipse.jface.preference.PreferencePage#performDefaults()
	 */
	@Override
	protected void performDefaults() {
		parameter.setAlwaysSave(store.getDefaultBoolean(ShimPreferencesKey.WIZ_CHECK_ALWAYS));
		parameter.setSaveOnRequest(store.getDefaultBoolean(ShimPreferencesKey.WIZ_CHECK_ON_REQUEST));
		parameter.setNeverSave(store.getDefaultBoolean(ShimPreferencesKey.WIZ_CHECK_NEVER));
		
		store.setToDefault(ShimPreferencesKey.WIZ_CHECK_ALWAYS);
		store.setToDefault(ShimPreferencesKey.WIZ_CHECK_ON_REQUEST);
		store.setToDefault(ShimPreferencesKey.WIZ_CHECK_NEVER);
		
		store.save();

		ShimPreferences.getCurrentInstance().loadSavePolicyPreferences();
		m_bindingContext.updateTargets();
		super.performDefaults();
	}
}
