/*
 * Copyright (c) 2014 eSOL Co.,Ltd. and Nagoya University
 *
 * This software is released under the MIT License.
 * http://opensource.org/licenses/mit-license.php
 */
package org.multicore_association.shim.edit.gui.jface.preferences;

import org.eclipse.core.databinding.DataBindingContext;
import org.eclipse.core.databinding.beans.PojoProperties;
import org.eclipse.core.databinding.observable.value.IObservableValue;
import org.eclipse.jface.databinding.swt.WidgetProperties;
import org.eclipse.jface.preference.PreferencePage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.multicore_association.shim.api.ComponentSet;
import org.multicore_association.shim.edit.gui.common.LabelConstants;
import org.multicore_association.shim.edit.gui.jface.ErrorMessagePool;
import org.multicore_association.shim.edit.gui.swt.TextRequiredModifier;
import org.multicore_association.shim.edit.model.ShimPreferences;
import org.multicore_association.shim.edit.model.preferences.ComponentSetPreferences;
import org.multicore_association.shim.edit.model.preferences.ShimPreferencesKey;
import org.multicore_association.shim.edit.model.preferences.ShimPreferencesStore;

/**
 * Preference page that allows configuration of the ComponentSet.
 */
public class ComponentSetPreferencePage extends PreferencePage {
	private DataBindingContext m_bindingContext;
	
	private ComponentSetPreferences parameter;
	private ShimPreferencesStore store;
	private Text textBasename;
	
	private ErrorMessagePool pool;

	/**
	 * Constructs a new instance of ComponentSetPreferencePage.
	 */
	public ComponentSetPreferencePage() {
		setTitle("ComponentSet");
		store = ShimPreferencesStore.getInstance();
		
		parameter = new ComponentSetPreferences();
		parameter.setBaseName(store.getString(ShimPreferencesKey.CP_COMPONENTSET_NAME));
		
		pool = new ErrorMessagePool(this);
	}

	/**
	 * Creates contents of this page.
	 * 
	 * @param parent
	 *            the parent composite
	 */
	@Override
	public Control createContents(Composite parent) {
		Composite container = new Composite(parent, SWT.NULL);
		container.setLayout(new GridLayout(2, false));
		
		Label lblBasename = new Label(container, SWT.NONE);
		lblBasename.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblBasename.setText(LabelConstants.BASE_NAME);
		
		textBasename = new Text(container, SWT.BORDER);
		GridData gd_textBasename = new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1);
		gd_textBasename.widthHint = 200;
		textBasename.setLayoutData(gd_textBasename);
		textBasename.addModifyListener(new TextRequiredModifier(pool,
				ComponentSet.class, "name", lblBasename.getText()));
		
		m_bindingContext = initDataBindings();

		return container;
	}

	/**
	 * Initializes the DataBindingContext.<br>
	 * This method is generated by WindowsBuilder.
	 * 
	 * @return the initialized DataBindingContext
	 */
	protected DataBindingContext initDataBindings() {
		DataBindingContext bindingContext = new DataBindingContext();
		//
		IObservableValue observeTextTextBasenameObserveWidget = WidgetProperties.text(SWT.Modify).observe(textBasename);
		IObservableValue baseNameParameterObserveValue = PojoProperties.value("baseName").observe(parameter);
		bindingContext.bindValue(observeTextTextBasenameObserveWidget, baseNameParameterObserveValue, null, null);
		//
		return bindingContext;
	}
	
	/**
	 * @see org.eclipse.jface.preference.PreferencePage#performDefaults()
	 */
	@Override
	protected void performDefaults() {
		parameter.setBaseName(store.getDefaultString(ShimPreferencesKey.CP_COMPONENTSET_NAME));
		
		store.setToDefault(ShimPreferencesKey.CP_COMPONENTSET_NAME);
		store.save();
		
		ShimPreferences.getCurrentInstance().loadComponentSetPreferences();
		
		m_bindingContext.updateTargets();
		
		super.performDefaults();
	}
	
	/**
	 * @see org.eclipse.jface.preference.PreferencePage#performApply()
	 */
	@Override
	protected void performApply() {
		m_bindingContext.updateModels();
		
		store.setString(ShimPreferencesKey.CP_COMPONENTSET_NAME, parameter.getBaseName());
		store.save();
		
		ShimPreferences.getCurrentInstance().loadComponentSetPreferences();
		
		super.performApply();
	}
}
